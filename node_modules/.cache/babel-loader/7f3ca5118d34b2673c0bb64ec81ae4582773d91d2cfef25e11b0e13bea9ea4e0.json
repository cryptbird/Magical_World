{"ast":null,"code":"var _jsxFileName = \"D:\\\\aamagical_world website\\\\src\\\\components\\\\ParticleSystem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './ParticleSystem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleSystem = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const particlesRef = useRef([]);\n  const mouseRef = useRef({\n    x: 0,\n    y: 0\n  });\n  const animationRef = useRef(null);\n  useEffect(() => {\n    // Check if we're in a browser environment\n    if (typeof window === 'undefined') return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      if (!canvas) return;\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Particle class\n    class Particle {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.vx = (Math.random() - 0.5) * 0.5;\n        this.vy = (Math.random() - 0.5) * 0.5;\n        this.size = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.5 + 0.3;\n        this.life = Math.random() * 100 + 50;\n        this.maxLife = this.life;\n        this.type = Math.random() > 0.5 ? 'sparkle' : 'dust';\n        this.angle = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.1;\n      }\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n        this.angle += this.rotationSpeed;\n        this.life--;\n\n        // Attract to mouse\n        const dx = mouseRef.current.x - this.x;\n        const dy = mouseRef.current.y - this.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 100) {\n          const force = (100 - distance) / 100;\n          this.vx += dx * force * 0.001;\n          this.vy += dy * force * 0.001;\n        }\n\n        // Damping\n        this.vx *= 0.99;\n        this.vy *= 0.99;\n\n        // Wrap around screen\n        if (this.x < 0) this.x = canvas.width;\n        if (this.x > canvas.width) this.x = 0;\n        if (this.y < 0) this.y = canvas.height;\n        if (this.y > canvas.height) this.y = 0;\n      }\n      draw() {\n        const alpha = this.life / this.maxLife * this.opacity;\n        ctx.save();\n        ctx.globalAlpha = alpha;\n        if (this.type === 'sparkle') {\n          // Draw sparkle\n          ctx.translate(this.x, this.y);\n          ctx.rotate(this.angle);\n          ctx.fillStyle = '#ffd700';\n          ctx.shadowColor = '#ffd700';\n          ctx.shadowBlur = 10;\n          for (let i = 0; i < 4; i++) {\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(0, this.size);\n            ctx.strokeStyle = '#ffd700';\n            ctx.lineWidth = 1;\n            ctx.stroke();\n            ctx.rotate(Math.PI / 2);\n          }\n        } else {\n          // Draw dust particle\n          ctx.fillStyle = '#ffffff';\n          ctx.shadowColor = '#ffffff';\n          ctx.shadowBlur = 5;\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n      isDead() {\n        return this.life <= 0;\n      }\n    }\n\n    // Initialize particles\n    const initParticles = () => {\n      particlesRef.current = [];\n      for (let i = 0; i < 50; i++) {\n        particlesRef.current.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));\n      }\n    };\n\n    // Animation loop\n    const animate = () => {\n      if (!ctx || !canvas) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw particles\n      particlesRef.current.forEach((particle, index) => {\n        particle.update();\n        particle.draw();\n        if (particle.isDead()) {\n          particlesRef.current[index] = new Particle(Math.random() * canvas.width, Math.random() * canvas.height);\n        }\n      });\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    // Mouse move handler\n    const handleMouseMove = e => {\n      mouseRef.current.x = e.clientX;\n      mouseRef.current.y = e.clientY;\n    };\n\n    // Initialize and start\n    try {\n      initParticles();\n      animate();\n      window.addEventListener('mousemove', handleMouseMove);\n    } catch (error) {\n      console.warn('Particle system initialization failed:', error);\n    }\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      window.removeEventListener('mousemove', handleMouseMove);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particle-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleSystem, \"bzJtNdMv66PkEaLhW7Fca3SSV2A=\");\n_c = ParticleSystem;\nexport default ParticleSystem;\nvar _c;\n$RefreshReg$(_c, \"ParticleSystem\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ParticleSystem","_s","canvasRef","particlesRef","mouseRef","x","y","animationRef","window","canvas","current","ctx","getContext","resizeCanvas","width","innerWidth","height","innerHeight","addEventListener","Particle","constructor","vx","Math","random","vy","size","opacity","life","maxLife","type","angle","PI","rotationSpeed","update","dx","dy","distance","sqrt","force","draw","alpha","save","globalAlpha","translate","rotate","fillStyle","shadowColor","shadowBlur","i","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","arc","fill","restore","isDead","initParticles","push","animate","clearRect","forEach","particle","index","requestAnimationFrame","handleMouseMove","e","clientX","clientY","error","console","warn","removeEventListener","cancelAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/aamagical_world website/src/components/ParticleSystem.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './ParticleSystem.css';\r\n\r\nconst ParticleSystem = () => {\r\n  const canvasRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n  const mouseRef = useRef({ x: 0, y: 0 });\r\n  const animationRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Check if we're in a browser environment\r\n    if (typeof window === 'undefined') return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    \r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      if (!canvas) return;\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Particle class\r\n    class Particle {\r\n      constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.vx = (Math.random() - 0.5) * 0.5;\r\n        this.vy = (Math.random() - 0.5) * 0.5;\r\n        this.size = Math.random() * 3 + 1;\r\n        this.opacity = Math.random() * 0.5 + 0.3;\r\n        this.life = Math.random() * 100 + 50;\r\n        this.maxLife = this.life;\r\n        this.type = Math.random() > 0.5 ? 'sparkle' : 'dust';\r\n        this.angle = Math.random() * Math.PI * 2;\r\n        this.rotationSpeed = (Math.random() - 0.5) * 0.1;\r\n      }\r\n\r\n      update() {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n        this.angle += this.rotationSpeed;\r\n        this.life--;\r\n        \r\n        // Attract to mouse\r\n        const dx = mouseRef.current.x - this.x;\r\n        const dy = mouseRef.current.y - this.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < 100) {\r\n          const force = (100 - distance) / 100;\r\n          this.vx += dx * force * 0.001;\r\n          this.vy += dy * force * 0.001;\r\n        }\r\n        \r\n        // Damping\r\n        this.vx *= 0.99;\r\n        this.vy *= 0.99;\r\n        \r\n        // Wrap around screen\r\n        if (this.x < 0) this.x = canvas.width;\r\n        if (this.x > canvas.width) this.x = 0;\r\n        if (this.y < 0) this.y = canvas.height;\r\n        if (this.y > canvas.height) this.y = 0;\r\n      }\r\n\r\n      draw() {\r\n        const alpha = (this.life / this.maxLife) * this.opacity;\r\n        ctx.save();\r\n        ctx.globalAlpha = alpha;\r\n        \r\n        if (this.type === 'sparkle') {\r\n          // Draw sparkle\r\n          ctx.translate(this.x, this.y);\r\n          ctx.rotate(this.angle);\r\n          ctx.fillStyle = '#ffd700';\r\n          ctx.shadowColor = '#ffd700';\r\n          ctx.shadowBlur = 10;\r\n          \r\n          for (let i = 0; i < 4; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, -this.size);\r\n            ctx.lineTo(0, this.size);\r\n            ctx.strokeStyle = '#ffd700';\r\n            ctx.lineWidth = 1;\r\n            ctx.stroke();\r\n            ctx.rotate(Math.PI / 2);\r\n          }\r\n        } else {\r\n          // Draw dust particle\r\n          ctx.fillStyle = '#ffffff';\r\n          ctx.shadowColor = '#ffffff';\r\n          ctx.shadowBlur = 5;\r\n          ctx.beginPath();\r\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n          ctx.fill();\r\n        }\r\n        \r\n        ctx.restore();\r\n      }\r\n\r\n      isDead() {\r\n        return this.life <= 0;\r\n      }\r\n    }\r\n\r\n    // Initialize particles\r\n    const initParticles = () => {\r\n      particlesRef.current = [];\r\n      for (let i = 0; i < 50; i++) {\r\n        particlesRef.current.push(\r\n          new Particle(\r\n            Math.random() * canvas.width,\r\n            Math.random() * canvas.height\r\n          )\r\n        );\r\n      }\r\n    };\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (!ctx || !canvas) return;\r\n      \r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Update and draw particles\r\n      particlesRef.current.forEach((particle, index) => {\r\n        particle.update();\r\n        particle.draw();\r\n        \r\n        if (particle.isDead()) {\r\n          particlesRef.current[index] = new Particle(\r\n            Math.random() * canvas.width,\r\n            Math.random() * canvas.height\r\n          );\r\n        }\r\n      });\r\n      \r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    // Mouse move handler\r\n    const handleMouseMove = (e) => {\r\n      mouseRef.current.x = e.clientX;\r\n      mouseRef.current.y = e.clientY;\r\n    };\r\n\r\n    // Initialize and start\r\n    try {\r\n      initParticles();\r\n      animate();\r\n      window.addEventListener('mousemove', handleMouseMove);\r\n    } catch (error) {\r\n      console.warn('Particle system initialization failed:', error);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCanvas);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} className=\"particle-canvas\" />;\r\n};\r\n\r\nexport default ParticleSystem; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}